from aiogram.types import CallbackQuery
from data_base.match_data import get_statistic, get_team, get_match_data
from aiogram import Bot
from keyboards.inline_keyboard import match_data_keyboard, match_data_keyboard_activate

async def one_team_statistic(callback_data: CallbackQuery, bot: Bot):
    message_id = callback_data.message.message_id
    message = callback_data.message.text
    id = message[-7:]
    data = get_statistic('team_one', int(id))
    command_name = str(get_team('command_one_name', id))[3:-4]
    command_wins = data[0][0]
    command_goals = data[0][1]
    command_overage_goals = data[0][2]
    best_win = data[0][3]
    match_id = data[0][5]
    count_games = data[0][4]

    await bot.edit_message_text(chat_id=callback_data.message.chat.id, message_id=message_id, text=f"""–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ <b>{str(command_name)}</b>‚öΩÔ∏è:
–ö–æ–ª-–≤–æ –ø–æ–±–µ–¥ –∫–æ–º–∞–Ω–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ <b>{str(count_games)}</b> –º–∞—Ç—á–µ–π üèÜ: <b>{str(command_wins)}</b>,
–ö–æ–ª-–≤–æ –≥–æ–ª–æ–≤ –∫–æ–º–∞–Ω–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ <b>{str(count_games)}</b> –º–∞—Ç—á–µ–π ü•Ö: <b>{str(command_goals)}</b>,
–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ –≥–æ–ª–æ–≤ –∫–æ–º–∞–Ω–¥—ã –∑–∞ –∏–≥—Ä—É: <b>{str(command_overage_goals)}</b>,
–°—á–µ—Ç –ª—É—á—à–µ–≥–æ –º–∞—Ç—á–∞ –∫–æ–º–∞–Ω–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≥—Ä—ã ü•á: <b>{str(best_win)}</b>,
id –º–∞—Ç—á–∞ üÜî: {str(match_id)}""", parse_mode='HTML', reply_markup=match_data_keyboard_activate)

async def two_team_statistic(callback_data: CallbackQuery, bot: Bot):
    message_id = callback_data.message.message_id
    message = callback_data.message.text
    id = message[-7:]
    command_name = str(get_team('command_two_name', id))[3:-4]
    data = get_statistic('team_two', int(id))
    command_wins = data[0][0]
    command_goals = data[0][1]
    command_overage_goals = data[0][2]
    best_win = data[0][3]
    match_id = data[0][5]
    count_games = data[0][4]

    await bot.edit_message_text(chat_id=callback_data.message.chat.id, message_id=message_id, text=f"""–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ <b>{str(command_name)}</b>‚öΩÔ∏è:
–ö–æ–ª-–≤–æ –ø–æ–±–µ–¥ –∫–æ–º–∞–Ω–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ <b>{str(count_games)}</b> –º–∞—Ç—á–µ–π üèÜ: <b>{str(command_wins)}</b>,
–ö–æ–ª-–≤–æ –≥–æ–ª–æ–≤ –∫–æ–º–∞–Ω–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ <b>{str(count_games)}</b> –º–∞—Ç—á–µ–π ü•Ö: <b>{str(command_goals)}</b>,
–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ –≥–æ–ª–æ–≤ –∫–æ–º–∞–Ω–¥—ã –∑–∞ –∏–≥—Ä—É: <b>{str(command_overage_goals)}</b>,
–°—á–µ—Ç –ª—É—á—à–µ–≥–æ –º–∞—Ç—á–∞ –∫–æ–º–∞–Ω–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≥—Ä—ã ü•á: <b>{str(best_win)}</b>,
id –º–∞—Ç—á–∞ üÜî: {str(match_id)}""", parse_mode='HTML', reply_markup=match_data_keyboard_activate)


# POV - probability of victory
async def show_prediction(callback_data: CallbackQuery, bot: Bot):
    message_id = callback_data.message.message_id
    message = callback_data.message.text
    id = message[-7:]
    team_one = get_statistic('team_one', int(id))
    team_two = get_statistic('team_two', int(id))

    team_one_name = str(get_team('command_one_name', id))[3:-4]
    team_two_name = str(get_team('command_two_name', id))[3:-4]

    POV_team_one = team_one[0][0] / team_one[0][4] * 100
    POV_team_two = team_two[0][0] / team_two[0][4] * 100
    POV_equal_score = (team_one[0][4] - (team_one[0][0] + team_two[0][0])) / team_two[0][4] * 100
    total_team_one = team_one[0][2]
    total_team_two = team_two[0][2]
    total = team_one[0][2] + team_two[0][2]

    match_id = team_one[0][5]

    await bot.edit_message_text(chat_id=callback_data.message.chat.id, message_id=message_id, text=f"""–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–±–µ–¥—ã <b>{team_one_name}: {round(POV_team_one, 2)}%</b>,
–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–±–µ–¥—ã <b>{team_two_name}: {round(POV_team_two, 2)}%</b>,
–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å <b>–Ω–∏—á—å–µ–π: {round(POV_equal_score, 2)}%</b>,
–°—Ä–µ–¥–Ω–∏–π —Ç–æ—Ç–∞–ª {team_one_name}: <b>{round(total_team_one, 2)}</b>,
–°—Ä–µ–¥–Ω–∏–π —Ç–æ—Ç–∞–ª {team_two_name}: <b>{round(total_team_two, 2)}</b>,
–°—Ä–µ–¥–Ω–∏–π —Ç–æ—Ç–∞–ª –≤—Å–µ–≥–æ –º–∞—Ç—á–∞: <b>{round(total, 2)}</b>,
id –º–∞—Ç—á–∞: {str(match_id)}""", parse_mode='HTML', reply_markup=match_data_keyboard_activate)


async def back(callback_data: CallbackQuery, bot: Bot):
    message_id = callback_data.message.message_id
    message = callback_data.message.text
    id = message[-7:]
    match_data = get_match_data(id)
    await bot.edit_message_text(chat_id=callback_data.message.chat.id, message_id=message_id, text=f"""<b>{str(match_data[0][0])}</b>‚öΩÔ∏è –ø—Ä–æ—Ç–∏–≤ <b>{str(match_data[0][1])}</b>‚öΩÔ∏è  
    –ù–∞—á–∞–ª–æ –≤ <b>{match_data[0][2]}</b>üïö
    {match_data[0][3]}
    id –º–∞—Ç—á–∞ üÜî: <b>{match_data[0][4]}</b>""", reply_markup=match_data_keyboard, parse_mode='HTML')

